// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Better Auth Required Models ===

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  name             String?
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Champs Tajdeed spécifiques
  username         String?   @unique
  role             Role      @default(USER)
  status           UserStatus @default(ACTIVE)
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  moderationActions ModeratedUser[] @relation("ModeratedUser")
  moderatorActions  ModeratedUser[] @relation("ModeratorUser")
  warnings         UserWarning[]
  
  @@map("users")
}

model Account {
  id                String   @id @default(uuid())
  accountId         String   @unique // Better Auth requirement
  providerId        String   // Better Auth: nom du provider (credential, google, etc.)
  userId            String
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  idToken           String?  @map("id_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?  // Pour l'authentification par email/password
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token") // Better Auth: token de session
  userId       String   @map("user_id")
  expiresAt    DateTime @map("expires_at") // Better Auth utilise expiresAt
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  id         String             @id @default(uuid())
  identifier String             // Email de l'utilisateur
  token      String             @unique
  expiresAt  DateTime           @map("expires_at") // Better Auth utilise expiresAt
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime           @default(now()) @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// === Modeles de Modération ===

model ModeratedUser {
  id           String           @id @default(uuid())
  userId       String
  moderatorId  String
  action       ModerationAction
  reason       String
  duration     Int?             // Durée en heures pour les suspensions/bans temporaires
  isActive     Boolean          @default(true)
  evidence     String?          // URL ou description de preuve
  notes        String?
  createdAt    DateTime         @default(now())
  expiresAt    DateTime?        // Date d'expiration pour les actions temporaires
  
  user         User             @relation("ModeratedUser", fields: [userId], references: [id], onDelete: Cascade)
  moderator    User             @relation("ModeratorUser", fields: [moderatorId], references: [id])
  
  @@map("moderated_users")
}

model UserWarning {
  id        String      @id @default(uuid())
  userId    String
  reason    String
  severity  WarningSeverity @default(LOW)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  expiresAt DateTime?   // Optionnel : certains avertissements peuvent expirer
  
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_warnings")
}

// === Enums ===

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

enum ModerationAction {
  WARNING
  TEMPORARY_SUSPENSION
  PERMANENT_BAN
  CONTENT_REMOVAL
  ACCOUNT_RESTRICTION
}

enum WarningSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}